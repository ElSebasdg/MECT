1.) The ability of the system to hide its complexity from users and application programs. The goal is to make the distributed system appear as a single, unified system to the users, despite its underlying distributed architecture.

    Access Transparency: Users can access local and remote information objects using identical operations, without knowing whether the objects are local or remote.

    Location Transparency: Users can access information objects without knowing their location within the distributed system.

    Concurrency Transparency: Multiple processes running concurrently can share information objects without interfering with each other.

    Replication Transparency: The system can have multiple instances of information objects to increase reliability, without the knowledge of users or applications.

    Migration Transparency: Information objects can be moved within the system without affecting the operations performed on them.

    Performance Transparency: The system can be reconfigured based on load and quality of service requirements, without impacting the users or applications.

    Mobility Transparency: The location of the client's acess point can change without affecting the application.
    
    Relocation Transparency: Stronger version of Migration , that allows the Resource to change location DURING the operation.
    
    Scaling Transparency: When the system and applications may expand in scale without requiring any change in the system structure and on the application algorithms
    
    Failure transparency – when failures, occurring in the hardware and/or software system components, can be masked and, therefore, the tasks in execution be terminated.
    

2.) Naming service, Remote Reference, Communication channel, server proxy agent , shared Resource interface , shared resource and int/outMessage.

    The main trhead base instantiates all the components beisde the in/out message.
    The naming service and remote reference create a lokup reference for naming and adressing the remote objects.
    The communication channel coordinates the transfer of information between the server proxy agent and the main thread base.
    Server Proxy agent upon receiving a message it passes the values onto the shared resource interface to be later called locally.
    The shared resource interface servers as the coordination layer bettween the server proxy agent and the shared resource it manages the calls on the shared resource
    The in/out message contain the marshaled information to be processed or that has been processed by the shared resource.
    
    Network transparency in this context is the ability to create a seamless experience to the user that the remote calling of the object methods appear local.In Java it can be obtained by utilizing the java RMI or java remote method invocation interface, as the name implies it make available frameworks for the implementation of the remote calling of objects.
    
    
3.) a (0,0,1)
    b (0,0,2)
    c (2,4,3)
    d (2,4,4)
    e (0,1,2)
    f (2,2,2)
    g (2,3,2)
    h (2,4,2)
    i (1,0,0)
    j (2,0,0)
    k (3,5,2)
    l (3,5,5)
    m (4,5,5)
    
ii.) SKIPDDYBY badu bedam

iii.) a e f i são passados pois g depende da sua execução
      c d h k l m são futuros pois dependem da execução de g


4.In a peer-to-peer distributed system using a virtual ring based on individual IDs, the algorithms for insertion and retrieval of a processing node in the ring can be described as follows:

Insertion:

    A new node with a unique ID wants to join the ring.
    The new node contacts an existing node in the ring and requests to be inserted.
    The existing node helps the new node find its position in the ring based on its ID. In a virtual ring, the nodes are ordered according to their IDs, so the new node will be inserted between two nodes with IDs immediately smaller and larger than its own.
    The new node updates its predecessor and successor pointers to point to the appropriate nodes, and the predecessor and successor of the new node also update their pointers accordingly.

Retrieval:

    To retrieve a node from the ring, first, find the node with the specified ID using a routing algorithm, such as the Chord algorithm or Content-Addressable Network (CAN) algorithm.
    Once the target node is found, the predecessor and successor of the target node update their pointers to bypass the target node, effectively removing it from the ring.
    The retrieved node's resources can be redistributed among the remaining nodes in the ring, if necessary.


    
 
    
    
    
    
    
    
