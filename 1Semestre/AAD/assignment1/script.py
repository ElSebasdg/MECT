import itertools
import networkx as nx

# level 0
# ['X', '', 'X', '', '', 'X', 'X', 'X'],
# ['X', 'X', 'X', '', 'X', '', '', 'X'],
# [ '', 'X', 'X', 'X', '', 'X', '', 'X'],
# ['X', 'X', 'X', '', 'X', '', 'X', ''],
# ['', 'X', 'X', 'X', '', '', 'X', 'X'],
# ['X', 'X', 'X', '', '', 'X', 'X', ''],
# ['', 'X', 'X', '', 'X', '', 'X', 'X'],
# ['X', 'X', '', 'X', '', 'X', 'X', ''],
# ['', '', '', '', 'X', '', 'X', 'X'],
# ['', '', '', 'X', '', 'X', 'X', ''],
# ['', '', 'X', '', 'X', 'X', '', ''],
# ['', 'X', '', 'X', 'X', '', '', ''],
# ['X', '', 'X', 'X', '', '', '', ''],
# ['X', 'X', '', '', '', 'X', 'X', 'X'],
# ['', '', 'X', '', 'X', '', '', 'X'],
# ['', 'X', '', 'X', '', '', 'X', '']


# level 1
# ['X', 'X', '', '', '', 'X', 'X', ''],
# ['', 'X', '', 'X', '', '', '', ''],
# ['', '', '', '', 'X', '', 'X', 'X'],
# ['', '', 'X', '', 'X', '', '', ''],
# ['', 'X', 'X', 'X', '', '', '', 'X'],
# ['X', '', 'X', '', '', '', '', ''],
# ['', '', '', 'X', '', 'X', 'X', ''],
# ['X', 'X', 'X', '', 'X', '', '', ''],
# ['', 'X', '', '', '', '', '', ''],
# ['', '', 'X', '', '', '', '', ''],
# ['', '', '', '', '', 'X', '', ''],
# ['', '', '', '', '', '', 'X', ''],
# ['', '', '', '', '', '', '', 'X'],
# ['', '', '', '', '', '', 'X', ''],
# ['', '', '', '', '', '', '', 'X'],
# ['X', '', '', '', '', '', '', ''],
# ['', '', '', 'X', '', '', '', ''],
# ['', '', '', '', 'X', '', '', ''],
# ['', '', '', '', '', 'X', '', '']


# Convert your Excel matrix into a Python list of list


# level 2
# ['', '', '', '', 'X', '', '', ''],
# ['', '', '', '', '', 'X', '', ''],
# ['', '', '', '', '', '', 'X', ''],
# ['', '', '', '', '', '', '', 'X'],
# ['', '', '', '', '', 'X', 'X', ''],
# ['', '', 'X', '', 'X', '', '', ''],
# ['', '', 'X', '', '', '', '', ''],
# ['', 'X', '', 'X', '', '', '', ''],
# ['', '', '', '', '', '', '', 'X'],
# ['X', '', '', '', '', '', '', ''],
# ['', 'X', '', '', '', '', '', ''],
# ['', '', '', 'X', '', '', '', ''],
# ['X', '', '', '', '', '', '', ''],
# ['', 'X', '', '', '', '', '', ''],
# ['', '', '', '', '', '', 'X', ''],
# ['', '', 'x', '', '', '', '', '']


# level 3
# ['', '', '', '', 'X', '', '', ''],
# ['', '', '', '', '', 'X', '', ''],
# ['', '', '', '', '', '', 'X', ''],
# ['', '', '', '', '', '', '', 'X'],
# ['', '', '', '', '', 'X', 'X', ''],
# ['', '', 'X', '', 'X', '', '', ''],
# ['', '', 'X', '', '', '', '', ''],
# ['', 'X', '', 'X', '', '', '', ''],
# ['', '', '', '', '', '', '', 'X'],
# ['X', '', '', '', '', '', '', ''],
# ['', 'X', '', '', '', '', '', ''],
# ['', '', '', 'X', '', '', '', ''],
# ['X', '', '', '', '', '', '', ''],
# ['', 'X', '', '', '', '', '', ''],
# ['', '', '', '', '', '', 'X', ''],
# ['', '', 'X', '', '', '', '', '']

import itertools
import networkx as n

matrix = [
['X', '', 'X', '', '', 'X', 'X', 'X'],
['X', 'X', 'X', '', 'X', '', '', 'X'],
[ '', 'X', 'X', 'X', '', 'X', '', 'X'],
['X', 'X', 'X', '', 'X', '', 'X', ''],
['', 'X', 'X', 'X', '', '', 'X', 'X'],
['X', 'X', 'X', '', '', 'X', 'X', ''],
['', 'X', 'X', '', 'X', '', 'X', 'X'],
['X', 'X', '', 'X', '', 'X', 'X', ''],
['', '', '', '', 'X', '', 'X', 'X'],
['', '', '', 'X', '', 'X', 'X', ''],
['', '', 'X', '', 'X', 'X', '', ''],
['', 'X', '', 'X', 'X', '', '', ''],
['X', '', 'X', 'X', '', '', '', ''],
['X', 'X', '', '', '', 'X', 'X', 'X'],
['', '', 'X', '', 'X', '', '', 'X'],
['', 'X', '', 'X', '', '', 'X', '']

]


# Generate all possible combinations of pairs of rows
pairs = list(itertools.combinations(range(len(matrix)), 2))

# Create a weighted bipartite graph
B = nx.Graph()

# Add nodes with the node attribute "bipartite"
B.add_nodes_from(range(len(matrix)), bipartite=0)

# Add edges with weights
for pair in pairs:
    weight = sum(i == 'X' and j == 'X' for i,j in zip(matrix[pair[0]], matrix[pair[1]]))
    B.add_edge(pair[0], pair[1], weight=weight)

# Compute the maximum weight matching
matching = nx.algorithms.matching.max_weight_matching(B, maxcardinality=True)

# Print the matching
for pair in matching:
    weight = B[pair[0]][pair[1]]['weight']
    print(f'Pair {pair} = {weight} occurrences.')